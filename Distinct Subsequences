##  Distinct Subsequences

class Solution {
public:

int count=0;

    void f(string s, string t,string v,int n,int i){
        if(i==n){
            if(v==t){
                count++;
            }
            return;
        }
        v+=s[i];
        f(s,t,v,n,i+1);
        v.pop_back();
        f(s,t,v,n,i+1);
    }

    int r(string s, string t,int n,int m,int i,int j,vector<vector<int>> &dp){
        if(i<0 && j<0) return 1;
        if(i<0 && j>=0) return 0;
        if(j<0 && i>=0) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==t[j])
        return dp[i][j]= r(s,t,n,m,i-1,j-1,dp)+r(s,t,n,m,i-1,j,dp);
        return dp[i][j]= r(s,t,n,m,i-1,j,dp);
    }
    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();
        string v="";
        //f(s,t,v,n,0);
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return r(s,t,n,m,n-1,m-1,dp);
        

    }
};
