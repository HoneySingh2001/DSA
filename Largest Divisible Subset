## Largest Divisible Subset

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& a) {
        int n=a.size();
        vector<int> ans;
        sort(a.begin(),a.end());
        int dp[n];
        dp[0]=1;
        int maxi=1;
        int index=-1;
        vector<int> v(n);
        for(int i=0;i<n;i++){
            v[i]=i;
        }
        for(int i=1;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if( (a[i]%a[j])==0 && dp[i]<(1+dp[j])){
                    dp[i]=1+dp[j];
                    v[i]=j;
                }
            }
            if(maxi<dp[i]){
                maxi=dp[i];
                index=i;
            }
            
        }
        if(index==-1){
            return {a[0]};
        }
        ans.push_back(a[index]);
        while(v[index]!=index){
            int i=v[index];
            ans.push_back(a[i]);
            index=v[index];
        }
        reverse(ans.begin(),ans.end());
        return ans;
    
    }
};
