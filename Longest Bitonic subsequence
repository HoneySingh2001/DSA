## Longest Bitonic subsequence
class Solution {
  public:
    int LongestBitonicSequence(int n, vector<int> &a) {
        // code here
        int dp1[n],dp2[n];
        int maxi=0,maxi1=0,maxi2=0;
        for(int i=0;i<n;i++){
            dp1[i]=1;
            for(int j=0;j<i;j++){
                if(a[i]>a[j] && dp1[i]<(1+dp1[j])){
                    dp1[i]=1+dp1[j];
                }
            }
            maxi1=max(maxi1,dp1[i]);
            
        }
        for(int i=n-1;i>=0;i--){
            dp2[i]=1;
            for(int j=n-1;j>i;j--){
                if(a[i]>a[j] && dp2[i]<1+dp2[j]){
                    dp2[i]=1+dp2[j];
                }
            }
             maxi2=max(maxi2,dp2[i]);
            
        }
        int x=0;
        for(int i=1;i<n;i++){
            if(dp1[i]!=1 && dp2[i]!=1)
            x=dp1[i]+dp2[i]-1;
            maxi=max(maxi,x);
        }
        return maxi;
        
    }
};
