##   N-Queens

class Solution {
public:

bool issafe(vector<string>& board,int col,int row,int n){
    int i=row;
    int j=col;
    while(i>=0 && j>=0){
        if(board[i][j]=='Q')
        return false;
        i--;
        j--;
    }
    i=row;
    j=col;
    while(i<n && j>=0){
        if(board[i][j]=='Q')
        return false;
        i++;
        j--;
    }
    i=row;
    j=col;
    while(j>=0){
        if(board[i][j]=='Q')
        return false;
        j--;
    }
    return true;
}
void f(int n, vector<vector<string>> &ans,vector<string> &board,int col){
    if(col==n){
        ans.push_back(board);
        return;
    }
    for(int row=0;row<n;row++){
        if(issafe(board,col,row,n)){
            board[row][col]='Q';
            f(n,ans,board,col+1);
            board[row][col]='.';
        }
    }
}
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        f(n,ans,board,0);
        return ans;
    }
};
