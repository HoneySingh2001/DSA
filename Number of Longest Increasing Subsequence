## Number of Longest Increasing Subsequence

class Solution {
public:
    int findNumberOfLIS(vector<int>& a) {
        int n=a.size();
        if(n==0) return 0;
        if(n==1) return 1;
        int dp[n];
        dp[0]=1;
        int maxi=1;
        vector<int> count(n,1);
        for(int i=1;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(a[i]>a[j] && dp[i]<(1+dp[j]))
                {
                    dp[i]=1+dp[j];
                    count[i]=count[j];
                }
                else{
                    if(a[i]>a[j] && dp[i]==1+dp[j]){
                        count[i]+=count[j];
                    }
                }
            }
            maxi=max(maxi,dp[i]);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(dp[i]==maxi)
            ans+=count[i];
        }
        return ans;

        
    }
};
