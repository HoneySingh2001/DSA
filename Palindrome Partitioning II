#  Palindrome Partitioning II

class Solution {
public:
bool ispalindrome(string t){
    int i=0;
    int j=t.length()-1;
    while(i<j){
        if(t[i]!=t[j]) return 0;
        i++;
        j--;
    }
    return true;;
}
int f(string s, unordered_map<string,int> &mp){
    if(mp.find(s)!=mp.end()) return mp[s];
    if(ispalindrome(s)){
        return 0;
    }
    int mini=INT_MAX;
    for(int l=1;l<=s.length();l++){
        string t=s.substr(0,l);
        if(ispalindrome(t)){
            string t1=s.substr(l,s.length()-l);
            mini=min(mini,1+f(t1,mp));
        }
    }
    return mp[s]= mini;
}
    int minCut(string s) {
        int n=s.length();
        unordered_map<string,int> mp;
        return f(s,mp);
    }
};
